#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DiskspaceWeb.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ASPNETDB")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMeasure(Measure instance);
    partial void UpdateMeasure(Measure instance);
    partial void DeleteMeasure(Measure instance);
    partial void InsertComputers(Computers instance);
    partial void UpdateComputers(Computers instance);
    partial void DeleteComputers(Computers instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertVolume(Volume instance);
    partial void UpdateVolume(Volume instance);
    partial void DeleteVolume(Volume instance);
    #endregion
		
		public DBDataContext() : 
				base(global::DiskspaceWeb.Data.Properties.Settings.Default.ASPNETDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Measure> Measures
		{
			get
			{
				return this.GetTable<Measure>();
			}
		}
		
		public System.Data.Linq.Table<Computers> Computers
		{
			get
			{
				return this.GetTable<Computers>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Volume> Volumes
		{
			get
			{
				return this.GetTable<Volume>();
			}
		}
	}
	
	[Table(Name="dbo.Measure")]
	public partial class Measure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _MeasureSize;
		
		private System.Nullable<System.DateTime> _MeasureDate;
		
		private System.Nullable<int> _VolumeId;
		
		private System.Nullable<int> _MeasureUsed;
		
		private EntityRef<Volume> _Volume;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMeasureSizeChanging(System.Nullable<int> value);
    partial void OnMeasureSizeChanged();
    partial void OnMeasureDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMeasureDateChanged();
    partial void OnVolumeIDChanging(System.Nullable<int> value);
    partial void OnVolumeIDChanged();
    partial void OnMeasureUsedChanging(System.Nullable<int> value);
    partial void OnMeasureUsedChanged();
    #endregion
		
		public Measure()
		{
			this._Volume = default(EntityRef<Volume>);
			OnCreated();
		}
		
		[Column(Name="Id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureSize", DbType="Int")]
		public System.Nullable<int> MeasureSize
		{
			get
			{
				return this._MeasureSize;
			}
			set
			{
				if ((this._MeasureSize != value))
				{
					this.OnMeasureSizeChanging(value);
					this.SendPropertyChanging();
					this._MeasureSize = value;
					this.SendPropertyChanged("MeasureSize");
					this.OnMeasureSizeChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MeasureDate
		{
			get
			{
				return this._MeasureDate;
			}
			set
			{
				if ((this._MeasureDate != value))
				{
					this.OnMeasureDateChanging(value);
					this.SendPropertyChanging();
					this._MeasureDate = value;
					this.SendPropertyChanged("MeasureDate");
					this.OnMeasureDateChanged();
				}
			}
		}
		
		[Column(Name="VolumeId", Storage="_VolumeId", DbType="Int")]
		public System.Nullable<int> VolumeID
		{
			get
			{
				return this._VolumeId;
			}
			set
			{
				if ((this._VolumeId != value))
				{
					this.OnVolumeIDChanging(value);
					this.SendPropertyChanging();
					this._VolumeId = value;
					this.SendPropertyChanged("VolumeID");
					this.OnVolumeIDChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureUsed", DbType="Int")]
		public System.Nullable<int> MeasureUsed
		{
			get
			{
				return this._MeasureUsed;
			}
			set
			{
				if ((this._MeasureUsed != value))
				{
					this.OnMeasureUsedChanging(value);
					this.SendPropertyChanging();
					this._MeasureUsed = value;
					this.SendPropertyChanged("MeasureUsed");
					this.OnMeasureUsedChanged();
				}
			}
		}
		
		[Association(Name="Volume_Measure", Storage="_Volume", ThisKey="VolumeID", OtherKey="ID", IsForeignKey=true)]
		public Volume Volume
		{
			get
			{
				return this._Volume.Entity;
			}
			set
			{
				Volume previousValue = this._Volume.Entity;
				if (((previousValue != value) 
							|| (this._Volume.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Volume.Entity = null;
						previousValue.Measures.Remove(this);
					}
					this._Volume.Entity = value;
					if ((value != null))
					{
						value.Measures.Add(this);
						this._VolumeId = value.ID;
					}
					else
					{
						this._VolumeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Volume");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Computers")]
	public partial class Computers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ComputerName;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private EntitySet<Volume> _Volumes;
		
		private EntityRef<Users> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnComputerNameChanging(string value);
    partial void OnComputerNameChanged();
    partial void OnUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public Computers()
		{
			this._Volumes = new EntitySet<Volume>(new Action<Volume>(this.attach_Volumes), new Action<Volume>(this.detach_Volumes));
			this._aspnet_User = default(EntityRef<Users>);
			OnCreated();
		}
		
		[Column(Name="Id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerName", DbType="VarChar(200)")]
		public string ComputerName
		{
			get
			{
				return this._ComputerName;
			}
			set
			{
				if ((this._ComputerName != value))
				{
					this.OnComputerNameChanging(value);
					this.SendPropertyChanging();
					this._ComputerName = value;
					this.SendPropertyChanged("ComputerName");
					this.OnComputerNameChanged();
				}
			}
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserID
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Association(Name="Computers_Volume", Storage="_Volumes", ThisKey="ID", OtherKey="ComputerID")]
		public EntitySet<Volume> Volumes
		{
			get
			{
				return this._Volumes;
			}
			set
			{
				this._Volumes.Assign(value);
			}
		}
		
		[Association(Name="Users_Computers", Storage="_aspnet_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				Users previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Computers.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Computers.Add(this);
						this._UserId = value.UserID;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Volumes(Volume entity)
		{
			this.SendPropertyChanging();
			entity.Computers = this;
		}
		
		private void detach_Volumes(Volume entity)
		{
			this.SendPropertyChanging();
			entity.Computers = null;
		}
	}
	
	[Table(Name="dbo.aspnet_Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<Computers> _Computers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public Users()
		{
			this._Computers = new EntitySet<Computers>(new Action<Computers>(this.attach_Computers), new Action<Computers>(this.detach_Computers));
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[Association(Name="Users_Computers", Storage="_Computers", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Computers> Computers
		{
			get
			{
				return this._Computers;
			}
			set
			{
				this._Computers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Computers(Computers entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Computers(Computers entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[Table(Name="dbo.Volumes")]
	public partial class Volume : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _VolumeName;
		
		private System.Nullable<int> _ComputerID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _VolumePath;
		
		private EntitySet<Measure> _Measures;
		
		private EntityRef<Computers> _Computers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVolumeNameChanging(string value);
    partial void OnVolumeNameChanged();
    partial void OnComputerIDChanging(System.Nullable<int> value);
    partial void OnComputerIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnVolumePathChanging(string value);
    partial void OnVolumePathChanged();
    #endregion
		
		public Volume()
		{
			this._Measures = new EntitySet<Measure>(new Action<Measure>(this.attach_Measures), new Action<Measure>(this.detach_Measures));
			this._Computers = default(EntityRef<Computers>);
			OnCreated();
		}
		
		[Column(Name="Id", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_VolumeName", DbType="VarChar(300)")]
		public string VolumeName
		{
			get
			{
				return this._VolumeName;
			}
			set
			{
				if ((this._VolumeName != value))
				{
					this.OnVolumeNameChanging(value);
					this.SendPropertyChanging();
					this._VolumeName = value;
					this.SendPropertyChanged("VolumeName");
					this.OnVolumeNameChanged();
				}
			}
		}
		
		[Column(Name="ComputerId", Storage="_ComputerID", DbType="Int")]
		public System.Nullable<int> ComputerID
		{
			get
			{
				return this._ComputerID;
			}
			set
			{
				if ((this._ComputerID != value))
				{
					this.OnComputerIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerID = value;
					this.SendPropertyChanged("ComputerID");
					this.OnComputerIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_VolumePath", DbType="VarChar(200)")]
		public string VolumePath
		{
			get
			{
				return this._VolumePath;
			}
			set
			{
				if ((this._VolumePath != value))
				{
					this.OnVolumePathChanging(value);
					this.SendPropertyChanging();
					this._VolumePath = value;
					this.SendPropertyChanged("VolumePath");
					this.OnVolumePathChanged();
				}
			}
		}
		
		[Association(Name="Volume_Measure", Storage="_Measures", ThisKey="ID", OtherKey="VolumeID")]
		public EntitySet<Measure> Measures
		{
			get
			{
				return this._Measures;
			}
			set
			{
				this._Measures.Assign(value);
			}
		}
		
		[Association(Name="Computers_Volume", Storage="_Computers", ThisKey="ComputerID", OtherKey="ID", IsForeignKey=true)]
		public Computers Computers
		{
			get
			{
				return this._Computers.Entity;
			}
			set
			{
				Computers previousValue = this._Computers.Entity;
				if (((previousValue != value) 
							|| (this._Computers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Computers.Entity = null;
						previousValue.Volumes.Remove(this);
					}
					this._Computers.Entity = value;
					if ((value != null))
					{
						value.Volumes.Add(this);
						this._ComputerID = value.ID;
					}
					else
					{
						this._ComputerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Computers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Measures(Measure entity)
		{
			this.SendPropertyChanging();
			entity.Volume = this;
		}
		
		private void detach_Measures(Measure entity)
		{
			this.SendPropertyChanging();
			entity.Volume = null;
		}
	}
}
#pragma warning restore 1591
