; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9030 

	TITLE	misccode\gla_stuff.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0CL@CKKKHOFG@Failed?5to?5Create?5OpenGL?5Renderin@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05BNKHHAOG@GLASS?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@GJDLIPAJ@Couldn?8t?5Register?5Window?5Class?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@OCONGMKI@glAss?5?$HM?5psikorp?52000?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09MOBNEOLM@TEST?5?$CIfs?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04OIKJMBFP@TEST?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@GKGAPFJA@TEST?5?$CI?$CBfs?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?glaExit@@YAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setupGL@@YAPAUHGLRC__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MainWndProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?glaStartup@@YAXHIII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?glaShutdown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?glaCls@@YAXM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?glaBlit@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?_pd@@3PAMA					; _pd
PUBLIC	?_pu@@3PAMA					; _pu
PUBLIC	?_pv@@3PAMA					; _pv
PUBLIC	?_pu2@@3PAMA					; _pu2
PUBLIC	?_pv2@@3PAMA					; _pv2
PUBLIC	?maindc@@3PAUHDC__@@A				; maindc
PUBLIC	?mainwindow@@3PAUHWND__@@A			; mainwindow
_BSS	SEGMENT
?_pd@@3PAMA DD	01H DUP (?)				; _pd
?_pu@@3PAMA DD	01H DUP (?)				; _pu
?_pv@@3PAMA DD	01H DUP (?)				; _pv
?_pu2@@3PAMA DD	01H DUP (?)				; _pu2
?_pv2@@3PAMA DD	01H DUP (?)				; _pv2
_done	DD	01H DUP (?)
_ready	DD	01H DUP (?)
_g_kbhit DD	01H DUP (?)
_g_getch DD	01H DUP (?)
?maindc@@3PAUHDC__@@A DD 01H DUP (?)			; maindc
?mainwindow@@3PAUHWND__@@A DD 01H DUP (?)		; mainwindow
_BSS	ENDS
_DATA	SEGMENT
?pfd@?1??setupGL@@YAPAUHGLRC__@@H@Z@4UtagPIXELFORMATDESCRIPTOR@@A DW 028H ; `setupGL'::`2'::pfd
	DW	01H
	DD	025H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	?glaExit@@YAHXZ					; glaExit
; Function compile flags: /Odt /ZI
;	COMDAT ?glaExit@@YAHXZ
_TEXT	SEGMENT
?glaExit@@YAHXZ PROC NEAR				; glaExit, COMDAT
; File d:\code\prj64k\glass (eventad)\misccode\gla_stuff.cpp
; Line 21
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
; Line 22
	mov	eax, DWORD PTR _g_kbhit
; Line 23
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?glaExit@@YAHXZ ENDP					; glaExit
_TEXT	ENDS
PUBLIC	?setupGL@@YAPAUHGLRC__@@H@Z			; setupGL
EXTRN	__imp__wglCreateContext@4:NEAR
EXTRN	__imp__wglDeleteContext@4:NEAR
EXTRN	__imp__wglMakeCurrent@8:NEAR
EXTRN	__imp__SetPixelFormat@12:NEAR
EXTRN	__imp__ChoosePixelFormat@8:NEAR
_BSS	SEGMENT
_hDC	DD	01H DUP (?)
; Function compile flags: /Odt /ZI
_BSS	ENDS
;	COMDAT ?setupGL@@YAPAUHGLRC__@@H@Z
_TEXT	SEGMENT
_rv$ = -8
_pixelFormat$ = -4
_bpp$ = 8
?setupGL@@YAPAUHGLRC__@@H@Z PROC NEAR			; setupGL, COMDAT
; Line 25
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
; Line 47
	mov	DWORD PTR _rv$[ebp], 0
; Line 49
	push	OFFSET FLAT:?pfd@?1??setupGL@@YAPAUHGLRC__@@H@Z@4UtagPIXELFORMATDESCRIPTOR@@A
	mov	eax, DWORD PTR _hDC
	push	eax
	call	DWORD PTR __imp__ChoosePixelFormat@8
	mov	DWORD PTR _pixelFormat$[ebp], eax
; Line 50
	cmp	DWORD PTR _pixelFormat$[ebp], 0
	je	SHORT $L19910
; Line 51
	push	OFFSET FLAT:?pfd@?1??setupGL@@YAPAUHGLRC__@@H@Z@4UtagPIXELFORMATDESCRIPTOR@@A
	mov	eax, DWORD PTR _pixelFormat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDC
	push	ecx
	call	DWORD PTR __imp__SetPixelFormat@12
	test	eax, eax
	je	SHORT $L19910
; Line 52
	mov	eax, DWORD PTR _hDC
	push	eax
	call	DWORD PTR __imp__wglCreateContext@4
	mov	DWORD PTR _rv$[ebp], eax
; Line 53
	cmp	DWORD PTR _rv$[ebp], 0
	je	SHORT $L19910
; Line 54
	mov	eax, DWORD PTR _rv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDC
	push	ecx
	call	DWORD PTR __imp__wglMakeCurrent@8
	test	eax, eax
	jne	SHORT $L19910
; Line 55
	mov	eax, DWORD PTR _rv$[ebp]
	push	eax
	call	DWORD PTR __imp__wglDeleteContext@4
; Line 56
	mov	DWORD PTR _rv$[ebp], 0
$L19910:
; Line 61
	mov	eax, DWORD PTR _rv$[ebp]
; Line 62
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?setupGL@@YAPAUHGLRC__@@H@Z ENDP			; setupGL
_TEXT	ENDS
PUBLIC	?MainWndProc@@YGJPAUHWND__@@IIJ@Z		; MainWndProc
PUBLIC	??_C@_0CL@CKKKHOFG@Failed?5to?5Create?5OpenGL?5Renderin@ ; `string'
EXTRN	__imp__DefWindowProcA@16:NEAR
EXTRN	__imp__PostQuitMessage@4:NEAR
EXTRN	__imp__GetDC@4:NEAR
EXTRN	__imp__DestroyWindow@4:NEAR
EXTRN	?Error@@YAXPAD@Z:NEAR				; Error
EXTRN	__imp__SetTimer@16:NEAR
_BSS	SEGMENT
_glRC	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CL@CKKKHOFG@Failed?5to?5Create?5OpenGL?5Renderin@
CONST	SEGMENT
??_C@_0CL@CKKKHOFG@Failed?5to?5Create?5OpenGL?5Renderin@ DB 'Failed to Cr'
	DB	'eate OpenGL Rendering Context.', 00H	; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?MainWndProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv64 = -72
_lRet$ = -4
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
?MainWndProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR		; MainWndProc, COMDAT
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
; Line 71
	mov	DWORD PTR _lRet$[ebp], 1
; Line 78
	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $L19926
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $L19930
	cmp	DWORD PTR tv64[ebp], 256		; 00000100H
	je	SHORT $L19929
	jmp	SHORT $L19931
$L19926:
; Line 80
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDC@4
	mov	DWORD PTR _hDC, eax
; Line 81
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	call	?setupGL@@YAPAUHGLRC__@@H@Z		; setupGL
	add	esp, 4
	mov	DWORD PTR _glRC, eax
; Line 82
	mov	DWORD PTR _ready, 1
; Line 83
	cmp	DWORD PTR _glRC, 0
	jne	SHORT $L19927
; Line 84
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DestroyWindow@4
; Line 85
	push	OFFSET FLAT:??_C@_0CL@CKKKHOFG@Failed?5to?5Create?5OpenGL?5Renderin@
	call	?Error@@YAXPAD@Z			; Error
	add	esp, 4
$L19927:
; Line 87
	push	0
	push	1
	push	1
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetTimer@16
; Line 88
	jmp	SHORT $L19923
$L19929:
; Line 91
	mov	DWORD PTR _g_kbhit, 1
; Line 92
	jmp	SHORT $L19923
$L19930:
; Line 115
	push	0
	call	DWORD PTR __imp__PostQuitMessage@4
; Line 117
	jmp	SHORT $L19923
$L19931:
; Line 121
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DefWindowProcA@16
	mov	DWORD PTR _lRet$[ebp], eax
$L19923:
; Line 126
	mov	eax, DWORD PTR _lRet$[ebp]
; Line 127
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?MainWndProc@@YGJPAUHWND__@@IIJ@Z ENDP			; MainWndProc
_TEXT	ENDS
PUBLIC	?glaStartup@@YAXHIII@Z				; glaStartup
PUBLIC	??_C@_05BNKHHAOG@GLASS?$AA@			; `string'
PUBLIC	??_C@_0BP@GJDLIPAJ@Couldn?8t?5Register?5Window?5Class?$AA@ ; `string'
PUBLIC	??_C@_0BF@OCONGMKI@glAss?5?$HM?5psikorp?52000?$AA@ ; `string'
PUBLIC	??_C@_09MOBNEOLM@TEST?5?$CIfs?$CJ?$AA@		; `string'
PUBLIC	??_C@_04OIKJMBFP@TEST?$AA@			; `string'
PUBLIC	??_C@_0L@GKGAPFJA@TEST?5?$CI?$CBfs?$CJ?$AA@	; `string'
EXTRN	__imp__GetTickCount@0:NEAR
EXTRN	__imp__RegisterClassA@4:NEAR
EXTRN	__imp__UpdateWindow@4:NEAR
EXTRN	__imp__CreateWindowExA@48:NEAR
EXTRN	__imp__ShowWindow@8:NEAR
EXTRN	__imp__ChangeDisplaySettingsA@8:NEAR
EXTRN	__imp__AdjustWindowRectEx@16:NEAR
EXTRN	__imp__EnumDisplaySettingsA@12:NEAR
EXTRN	__imp__GetModuleHandleA@4:NEAR
EXTRN	__imp__glClearDepth@8:NEAR
EXTRN	__imp__glViewport@16:NEAR
EXTRN	__fltused:NEAR
EXTRN	__imp__LoadCursorA@8:NEAR
EXTRN	__imp__GetSystemMetrics@4:NEAR
_BSS	SEGMENT
_hwnd	DD	01H DUP (?)
_time1	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_05BNKHHAOG@GLASS?$AA@
CONST	SEGMENT
??_C@_05BNKHHAOG@GLASS?$AA@ DB 'GLASS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GJDLIPAJ@Couldn?8t?5Register?5Window?5Class?$AA@
CONST	SEGMENT
??_C@_0BP@GJDLIPAJ@Couldn?8t?5Register?5Window?5Class?$AA@ DB 'Couldn''t '
	DB	'Register Window Class', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OCONGMKI@glAss?5?$HM?5psikorp?52000?$AA@
CONST	SEGMENT
??_C@_0BF@OCONGMKI@glAss?5?$HM?5psikorp?52000?$AA@ DB 'glAss | psikorp 20'
	DB	'00', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09MOBNEOLM@TEST?5?$CIfs?$CJ?$AA@
CONST	SEGMENT
??_C@_09MOBNEOLM@TEST?5?$CIfs?$CJ?$AA@ DB 'TEST (fs)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OIKJMBFP@TEST?$AA@
CONST	SEGMENT
??_C@_04OIKJMBFP@TEST?$AA@ DB 'TEST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GKGAPFJA@TEST?5?$CI?$CBfs?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@GKGAPFJA@TEST?5?$CI?$CBfs?$CJ?$AA@ DB 'TEST (!fs)', 00H ; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?glaStartup@@YAXHIII@Z
_TEXT	SEGMENT
_r$19961 = -224
_ws$19960 = -208
_stat$19952 = -204
_modenum$19951 = -200
_devmode$19950 = -196
_wc$ = -40
_fullscreen$ = 8
_w$ = 12
_h$ = 16
_bpp$ = 20
?glaStartup@@YAXHIII@Z PROC NEAR			; glaStartup, COMDAT
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
; Line 133
	mov	DWORD PTR _done, 0
; Line 135
	mov	DWORD PTR _wc$[ebp], 0
; Line 136
	mov	DWORD PTR _wc$[ebp+4], OFFSET FLAT:?MainWndProc@@YGJPAUHWND__@@IIJ@Z ; MainWndProc
; Line 137
	mov	DWORD PTR _wc$[ebp+8], 0
; Line 138
	mov	DWORD PTR _wc$[ebp+12], 0
; Line 139
	push	0
	call	DWORD PTR __imp__GetModuleHandleA@4
	mov	DWORD PTR _wc$[ebp+16], eax
; Line 140
	mov	DWORD PTR _wc$[ebp+20], 0
; Line 141
	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadCursorA@8
	mov	DWORD PTR _wc$[ebp+24], eax
; Line 142
	mov	DWORD PTR _wc$[ebp+28], 6
; Line 143
	mov	DWORD PTR _wc$[ebp+32], 0
; Line 144
	mov	DWORD PTR _wc$[ebp+36], OFFSET FLAT:??_C@_05BNKHHAOG@GLASS?$AA@
; Line 146
	lea	eax, DWORD PTR _wc$[ebp]
	push	eax
	call	DWORD PTR __imp__RegisterClassA@4
	movzx	ecx, ax
	test	ecx, ecx
	jne	SHORT $L19945
; Line 147
	push	OFFSET FLAT:??_C@_0BP@GJDLIPAJ@Couldn?8t?5Register?5Window?5Class?$AA@
	call	?Error@@YAXPAD@Z			; Error
	add	esp, 4
$L19945:
; Line 149
	cmp	DWORD PTR _fullscreen$[ebp], 0
	je	$L19947
; Line 158
	push	0
	push	0
	call	DWORD PTR __imp__GetModuleHandleA@4
	push	eax
	push	0
	push	0
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	push	0
	push	0
	push	-2147483648				; 80000000H
	push	OFFSET FLAT:??_C@_0BF@OCONGMKI@glAss?5?$HM?5psikorp?52000?$AA@
	push	OFFSET FLAT:??_C@_05BNKHHAOG@GLASS?$AA@
	push	0
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR _hwnd, eax
; Line 160
	push	OFFSET FLAT:??_C@_09MOBNEOLM@TEST?5?$CIfs?$CJ?$AA@
	call	?Error@@YAXPAD@Z			; Error
	add	esp, 4
; Line 169
	push	OFFSET FLAT:??_C@_04OIKJMBFP@TEST?$AA@
	call	?Error@@YAXPAD@Z			; Error
	add	esp, 4
; Line 171
	mov	DWORD PTR _modenum$19951[ebp], 0
$L19954:
; Line 174
	lea	eax, DWORD PTR _devmode$19950[ebp]
	push	eax
	mov	ecx, DWORD PTR _modenum$19951[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__EnumDisplaySettingsA@12
	mov	DWORD PTR _stat$19952[ebp], eax
; Line 180
	cmp	DWORD PTR _devmode$19950[ebp+104], 32	; 00000020H
	jne	SHORT $L19957
	mov	eax, DWORD PTR _devmode$19950[ebp+108]
	cmp	eax, DWORD PTR _w$[ebp]
	jne	SHORT $L19957
	mov	eax, DWORD PTR _devmode$19950[ebp+112]
	cmp	eax, DWORD PTR _h$[ebp]
	jne	SHORT $L19957
; Line 183
	mov	DWORD PTR _devmode$19950[ebp+40], 1835008 ; 001c0000H
; Line 186
	push	6
	lea	eax, DWORD PTR _devmode$19950[ebp]
	push	eax
	call	DWORD PTR __imp__ChangeDisplaySettingsA@8
	test	eax, eax
	jne	SHORT $L19957
; Line 188
	mov	DWORD PTR _stat$19952[ebp], 0
$L19957:
; Line 193
	mov	eax, DWORD PTR _modenum$19951[ebp]
	add	eax, 1
	mov	DWORD PTR _modenum$19951[ebp], eax
; Line 194
	cmp	DWORD PTR _stat$19952[ebp], 0
	jne	SHORT $L19954
; Line 196
	push	4
	lea	eax, DWORD PTR _devmode$19950[ebp]
	push	eax
	call	DWORD PTR __imp__ChangeDisplaySettingsA@8
; Line 198
	jmp	$L19959
$L19947:
; Line 200
	mov	DWORD PTR _ws$19960[ebp], 121634816	; 07400000H
; Line 203
	push	1
	call	DWORD PTR __imp__GetSystemMetrics@4
	sub	eax, DWORD PTR _h$[ebp]
	shr	eax, 1
	mov	DWORD PTR _r$19961[ebp+4], eax
; Line 204
	push	0
	call	DWORD PTR __imp__GetSystemMetrics@4
	sub	eax, DWORD PTR _w$[ebp]
	shr	eax, 1
	mov	DWORD PTR _r$19961[ebp], eax
; Line 205
	mov	eax, DWORD PTR _r$19961[ebp]
	add	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _r$19961[ebp+8], eax
; Line 206
	mov	eax, DWORD PTR _r$19961[ebp+4]
	add	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _r$19961[ebp+12], eax
; Line 207
	push	0
	push	0
	mov	eax, DWORD PTR _ws$19960[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$19961[ebp]
	push	ecx
	call	DWORD PTR __imp__AdjustWindowRectEx@16
; Line 216
	push	0
	push	0
	call	DWORD PTR __imp__GetModuleHandleA@4
	push	eax
	push	0
	push	0
	mov	eax, DWORD PTR _r$19961[ebp+12]
	sub	eax, DWORD PTR _r$19961[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _r$19961[ebp+8]
	sub	ecx, DWORD PTR _r$19961[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$19961[ebp+4]
	push	edx
	mov	eax, DWORD PTR _r$19961[ebp]
	push	eax
	mov	ecx, DWORD PTR _ws$19960[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_0BF@OCONGMKI@glAss?5?$HM?5psikorp?52000?$AA@
	push	OFFSET FLAT:??_C@_05BNKHHAOG@GLASS?$AA@
	push	0
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR _hwnd, eax
; Line 218
	push	OFFSET FLAT:??_C@_0L@GKGAPFJA@TEST?5?$CI?$CBfs?$CJ?$AA@
	call	?Error@@YAXPAD@Z			; Error
	add	esp, 4
$L19959:
; Line 222
	push	10					; 0000000aH
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
; Line 223
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__UpdateWindow@4
; Line 225
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	push	0
	push	0
	call	DWORD PTR __imp__glViewport@16
; Line 226
	push	1079574528				; 40590000H
	push	0
	call	DWORD PTR __imp__glClearDepth@8
; Line 228
	call	DWORD PTR __imp__GetTickCount@0
	mov	DWORD PTR _time1, eax
; Line 229
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?glaStartup@@YAXHIII@Z ENDP				; glaStartup
_TEXT	ENDS
PUBLIC	?glaShutdown@@YAXXZ				; glaShutdown
EXTRN	__imp__wglGetCurrentContext@0:NEAR
EXTRN	__imp__wglGetCurrentDC@0:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT ?glaShutdown@@YAXXZ
_TEXT	SEGMENT
_hDC$ = -8
_hRC$ = -4
?glaShutdown@@YAXXZ PROC NEAR				; glaShutdown, COMDAT
; Line 231
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
; Line 235
	call	DWORD PTR __imp__wglGetCurrentContext@0
	mov	DWORD PTR _hRC$[ebp], eax
; Line 236
	call	DWORD PTR __imp__wglGetCurrentDC@0
	mov	DWORD PTR _hDC$[ebp], eax
; Line 238
	push	0
	push	0
	call	DWORD PTR __imp__wglMakeCurrent@8
; Line 240
	cmp	DWORD PTR _hRC$[ebp], 0
	je	SHORT $L19967
; Line 241
	mov	eax, DWORD PTR _hRC$[ebp]
	push	eax
	call	DWORD PTR __imp__wglDeleteContext@4
$L19967:
; Line 247
	push	0
	push	0
	call	DWORD PTR __imp__ChangeDisplaySettingsA@8
; Line 254
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?glaShutdown@@YAXXZ ENDP				; glaShutdown
_TEXT	ENDS
PUBLIC	?glaCls@@YAXM@Z					; glaCls
PUBLIC	__real@00000000
EXTRN	__imp__glLoadIdentity@0:NEAR
EXTRN	__imp__glPopMatrix@0:NEAR
EXTRN	__imp__glPushMatrix@0:NEAR
EXTRN	__imp__glBegin@4:NEAR
EXTRN	__imp__glBlendFunc@8:NEAR
EXTRN	__imp__glClear@4:NEAR
EXTRN	__imp__glClearColor@16:NEAR
EXTRN	__imp__glVertex3f@12:NEAR
EXTRN	__imp__glColor4f@16:NEAR
EXTRN	__imp__glDisable@4:NEAR
EXTRN	__imp__glEnable@4:NEAR
EXTRN	__imp__glEnd@0:NEAR
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?glaCls@@YAXM@Z
_TEXT	SEGMENT
_mb$ = 8
?glaCls@@YAXM@Z PROC NEAR				; glaCls, COMDAT
; Line 256
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
; Line 257
	fld	DWORD PTR _mb$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L19971
; Line 258
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glEnable@4
; Line 259
	push	6406					; 00001906H
	call	DWORD PTR __imp__glEnable@4
; Line 260
	push	771					; 00000303H
	push	770					; 00000302H
	call	DWORD PTR __imp__glBlendFunc@8
; Line 261
	call	DWORD PTR __imp__glPushMatrix@0
; Line 262
	call	DWORD PTR __imp__glLoadIdentity@0
; Line 263
	push	7
	call	DWORD PTR __imp__glBegin@4
; Line 264
	mov	eax, DWORD PTR _mb$[ebp]
	push	eax
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__glColor4f@16
; Line 265
	push	0
	push	-1082130432				; bf800000H
	push	-1082130432				; bf800000H
	call	DWORD PTR __imp__glVertex3f@12
; Line 266
	push	0
	push	-1082130432				; bf800000H
	push	1065353216				; 3f800000H
	call	DWORD PTR __imp__glVertex3f@12
; Line 267
	push	0
	push	1065353216				; 3f800000H
	push	1065353216				; 3f800000H
	call	DWORD PTR __imp__glVertex3f@12
; Line 268
	push	0
	push	1065353216				; 3f800000H
	push	-1082130432				; bf800000H
	call	DWORD PTR __imp__glVertex3f@12
; Line 269
	call	DWORD PTR __imp__glEnd@0
; Line 270
	call	DWORD PTR __imp__glPopMatrix@0
; Line 271
	push	6406					; 00001906H
	call	DWORD PTR __imp__glDisable@4
; Line 272
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glDisable@4
; Line 273
	push	256					; 00000100H
	call	DWORD PTR __imp__glClear@4
; Line 274
	jmp	SHORT $L19970
$L19971:
; Line 275
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__glClearColor@16
; Line 276
	push	16640					; 00004100H
	call	DWORD PTR __imp__glClear@4
$L19970:
; Line 278
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?glaCls@@YAXM@Z ENDP					; glaCls
_TEXT	ENDS
PUBLIC	?glaBlit@@YAXXZ					; glaBlit
EXTRN	__imp__PeekMessageA@20:NEAR
EXTRN	__imp__SwapBuffers@4:NEAR
EXTRN	__imp__glFinish@0:NEAR
EXTRN	__imp__glFlush@0:NEAR
EXTRN	__imp__GetMessageA@16:NEAR
EXTRN	__imp__TranslateMessage@4:NEAR
EXTRN	__imp__DispatchMessageA@4:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT ?glaBlit@@YAXXZ
_TEXT	SEGMENT
_msg$ = -28
?glaBlit@@YAXXZ PROC NEAR				; glaBlit, COMDAT
; Line 285
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
; Line 287
	cmp	DWORD PTR _hDC, 0
	je	SHORT $L19976
	cmp	DWORD PTR _hwnd, 0
	jne	SHORT $L19975
$L19976:
	jmp	SHORT $L19974
$L19975:
; Line 289
	call	DWORD PTR __imp__glFinish@0
; Line 290
	call	DWORD PTR __imp__glFlush@0
; Line 291
	mov	eax, DWORD PTR _hDC
	push	eax
	call	DWORD PTR __imp__SwapBuffers@4
; Line 310
	push	0
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__PeekMessageA@20
	test	eax, eax
	je	SHORT $L19974
; Line 311
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__GetMessageA@16
; Line 312
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__TranslateMessage@4
; Line 313
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__DispatchMessageA@4
$L19974:
; Line 320
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?glaBlit@@YAXXZ ENDP					; glaBlit
_TEXT	ENDS
END
